#!/usr/bin/env node
const { spawn } = require("child_process");
const fs = require("fs-extra");
const path = require("path");

/**
 * @typedef {Object} Environments
 * @property {Map<string, string>} general - General environment
 * @property {Map<string, Map<string, string>} services - Per-service environment
 *
 * @typedef {Object} Link 
 * @property {string} from - location of the files/directories relative to library
 * @property {string} to - location of the files/directories relative to current component
 * 
 * @typedef {Object} Service
 * @property {string} type - Component type to indicate that this is a `service` should be "service"
 * @property {string} location - Location of the service relative to current directory
 * @property {string} start - Command to run service in local machine
 * @property {Map<string, string>} links - link from library's location to this repo
 * @property {string} origin - Origin of the repo
 * @property {string} branch - Repo branch (used for pull/clone)
 * 
 * @typedef {Object} Library
 * @property {string} type - Component type to indicate that this is a `library` should be "library"
 * @property {string} location - Location of the library relative to current directory
 * @property {Map<string, string>} links - link from other library's location to this repo
 * @property {string} origin - Origin of the repo
 * @property {string} branch - Repo branch (used for pull/clone)
 * 
 * @typedef {Object} Container
 * @property {string} type - Component type to indicate that this is a `container` should be "container"
 * @property {string} containerName - Container name
 * @property {string} run - Command to run container in local machine (will be executed if `start` is failed)
 * 
 * @typedef {Object} Config
 * @property {Environments} environments - Environments for each services.
 * @property {Map<string, Service | Library | Container>} components - Components.
 * @property {string[]} executions - Components execution order.
 */

function runCommand(command, option) {
    // create `proc` and make `promise` to wait until the `proc` closed.
    const proc = spawn("/bin/bash", ["-c", command], option);
    proc.stdout.on("data", (data) => {
        const strData = data.toString("utf8");
        process.stdout.write(strData);
    });
    proc.stderr.on("data", (data) => {
        const strData = data.toString("utf8");
        process.stderr.write(strData);
    });
    const promise = new Promise((resolve, reject) => {
        try {
            proc.on("close", (code) => {
                resolve(code);
            });
        } catch (error) {
            reject(error);
        }
    })
    return promise;
}

/**
 * synchronizeLink
 * @param {Config} config 
 */
async function synchronizeLink(config) {
    for (let serviceName in config.components) {
        const currentComponent = config.components[serviceName];
        if (!currentComponent.links) {
            continue;
        }
        for (let otherServiceName in currentComponent.links) {
            const link = currentComponent.links[otherServiceName];
            otherComponent = config.components[otherServiceName];
            if (!otherComponent) {
                continue;
            }
            const currentLocation = path.join(currentComponent.location, link.to);
            const otherLocation = path.join(otherComponent.location, link.from);
            console.log(`Copy ${otherLocation} to ${currentLocation}`)
            await fs.copy(otherLocation, currentLocation);
        }
    }
}

/**
 * pull all services and libraries
 * @param {Config} config - configuration
 */
async function pull(config) {
    const utcString = new Date().toISOString();
    const comment = `${utcString} Save Changes`;
    console.log(`[PULL MONOREPO]`);
    await runCommand(`git add . -A && git commit -m "${comment}"`);
    await runCommand(`git fetch && git checkout HEAD && git pull origin HEAD`);
    for (let componentName in config.components) {
        const component = config.components[componentName];
        if (["service", "library"].indexOf(component.type) == -1) {
            continue;
        }
        if (!component.origin || !component.location) {
            continue;
        }
        if (component.branch == "") {
            component.branch = "master";
        }
        const cwd = component.location;
        console.log(`[PULL ${componentName}]`);
        try {
            await runCommand(`git add . -A && git commit -m "${comment}"`, { cwd });
            await runCommand(`git fetch && git checkout HEAD && git pull origin HEAD`, { cwd });
        } catch (error) {
            await runCommand(`mkdir -p ${component.location} && git clone ${component.origin} ${component.location} && git checkout -b ${component.branch}`);
        }
    }
}

/**
 * push all service and libraries 
 * @param {Config} config - configuration
 * @param {string[]} args - arguments
 */
async function push(config, args) {
    const utcString = new Date().toISOString();
    const rawComment = args.length > 0 ? args[1] : "Save changes before push to remote"
    const comment = `${utcString} ${rawComment}`;
    for (let componentName in config.components) {
        const component = config.components[componentName];
        if (["service", "library"].indexOf(component.type) == -1) {
            continue;
        }
        if (!component.origin || !component.location) {
            continue;
        }
        const cwd = component.location;
        console.log(`[PUSH ${componentName}]`);
        await runCommand(`git add . -A && git commit -m "${comment}" && git push -u origin HEAD`, { cwd });
    }
    console.log(`[PUSH MONOREPO]`);
    await runCommand(`git add . -A && git commit -m "${comment}" && git push -u origin HEAD`);
}

/**
 * checkout all services and libraries
 * @param {Config} config - configuration
 * @param {string[]} args - arguments
 */
async function checkout(config, args) {
    const branch = args.length > 0 ? args[1] : "master"
    console.log(`[CHECKOUT MONOREPO to ${branch}]`);
    await runCommand(`git checkout -b "${branch}"`);
    for (let componentName in config.components) {
        const component = config.components[componentName];
        if (["service", "library"].indexOf(component.type) == -1) {
            continue;
        }
        if (!component.origin || !component.location) {
            continue;
        }
        const cwd = component.location;
        console.log(`[CHECKOUT ${componentName} to ${branch}]`);
        await runCommand(`git checkout -b "${branch}"`);
    }
}

/**
 * push all services and libraries 
 * @param {Config} config - configuration
 * @param {string[]} args - arguments
 */
async function merge(config, args) {
    const branch = args.length > 0 ? args[1] : "master"
    console.log(`[MERGE ${branch} to MONOREPO]`);
    await runCommand(`git merge "${branch}"`);
    for (let componentName in config.components) {
        const component = config.components[componentName];
        if (["service", "library"].indexOf(component.type) == -1) {
            continue;
        }
        if (!component.origin || !component.location) {
            continue;
        }
        const cwd = component.location;
        console.log(`[MERGE ${branch} to ${componentName}]`);
        await runCommand(`git merge "${branch}"`);
    }
}

/**
 * run command of a component
 * @param {string} serviceName - Name of the service (i.e: how the command is aliased)
 * @param {string} command  - The command
 * @param {Config} config - configuration
 */
function runComponentCommand(serviceName, command, config) {
    const cwd = config.components[serviceName].location;
    const env = {};
    for (let key in process.env) {
        env[key] = process.env[key];
    }
    for (let key in config.environments.general) {
        env[key] = config.environments.general[key];
    }
    for (let key in config.environments.services[serviceName]) {
        env[key] = config.environments.services[serviceName][key];
    }
    // create `proc` and make `promise` to wait until the `proc` closed.
    const proc = spawn("/bin/bash", ["-c", command], { cwd, env });
    proc.stdout.on("data", (data) => {
        const strData = data.toString("utf8").trim();
        const utcString = new Date().toISOString();
        console.log(`[STDOUT ${utcString} ${serviceName}] ${strData}`);
    });
    proc.stderr.on("data", (data) => {
        const strData = data.toString("utf8").trim();
        const utcString = new Date().toISOString();
        console.error(`[STDERR ${utcString} ${serviceName}] ${strData}`);
    });
    const promise = new Promise((resolve, reject) => {
        try {
            proc.on("close", (code) => {
                resolve(code);
            });
        } catch (error) {
            reject(error);
        }
    })
    return { promise, proc };
}

/**
 * run service component
 * @param {string} serviceName - Name of the service (i.e: how the command is aliased)
 * @param {Service} component - component
 * @param {Config} config - config
 */
function runServiceComponent(serviceName, component, config) {
    return runComponentCommand(serviceName, component.start, config);
}

/**
 * run container component
 * @param {string} serviceName - Name of the service (i.e: how the command is aliased)
 * @param {Container} component - component
 * @param {Config} config - config
 */
function runContainerComponent(serviceName, component, config) {
    const { promise: startPromise } = runComponentCommand(serviceName, `docker start ${component.containerName} || ${component.run}`, config);
    const { promise: logPromise, proc } = runComponentCommand(serviceName, `docker logs ${component.containerName} --follow`, config);
    const promise = startPromise.then(() => logPromise);
    return { promise, proc };
}

/**
 * get runner for component
 * @param {Service | Container | Library} component  - component
 */
function getComponentRunner(component) {
    switch (component.type) {
        case "container": return runContainerComponent;
        case "service": return runServiceComponent;
        default: return runServiceComponent;
    }
}

/**
 * run all `component` in config
 * @param {Config} config - configuration
 */
async function run(config) {
    const procs = [];
    // add controller (i.e: to terminate all process when ctrl+c is executed)
    const pControl = new Promise((resolve, reject) => {
        process.on("SIGINT", () => {
            console.log("Terminating all process...");
            try {
                for (proc of procs) {
                    proc.kill();
                }
            } catch (error) {
                reject(error);
            }
            console.log("All process terminated...");
            return resolve(true);
        });
    });
    // add all service processes
    let procPromise = new Promise((resolve) => resolve(true));
    for (let serviceName of config.executions) {
        const component = config.components[serviceName];
        if (["service", "container"].indexOf(component.type) == -1) {
            continue;
        }
        const runner = getComponentRunner(component);
        const { promise, proc } = runner(serviceName, component, config);
        procPromise = procPromise.then(promise);
        procs.push(proc)
    }
    // wait
    await Promise.all([pControl, procPromise]);
}

async function main() {
    if (process.argv.length < 3) {
        console.error("command expected");
    }
    const command = process.argv[2];
    const args = process.argv.slice(3);
    const config = require('./config.json'); // TODO: ini entar baca dari environment aja
    await synchronizeLink(config);
    switch (command) {
        case "pull": await pull(config); break;
        case "push": await push(config, args); break;
        case "run": await run(config); break;
        case "checkout": await checkout(config, args); break;
        case "merge": await merge(config, args); break;
        default: throw new Error("invalid command");
    }
    return true;
}

main().then((val) => {
    console.log("Done", val);
}).catch((error) => {
    console.error(error);
});